"""
Django settings for draw_client project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
from pathlib import Path
load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "django-insecure-qv0-srbz)^5iuf8j7&625gbs+nd^hti-^8@y*5oibpti2(o1p0")

# Field Encryption Key 
FIELD_ENCRYPTION_KEY = os.environ.get('FIELD_ENCRYPTION_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", True)

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "*").split(",")

# CSRF Protection Settings
CSRF_COOKIE_SECURE = os.getenv("CSRF_COOKIE_SECURE", "False").lower() == "true"
CSRF_COOKIE_HTTPONLY = os.getenv("CSRF_COOKIE_HTTPONLY", "False").lower() == "true"
CSRF_COOKIE_SAMESITE = os.getenv("CSRF_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_AGE = int(os.getenv("CSRF_COOKIE_AGE", "31449600"))  # 1 year default
CSRF_USE_SESSIONS = os.getenv("CSRF_USE_SESSIONS", "False").lower() == "true"
CSRF_COOKIE_NAME = os.getenv("CSRF_COOKIE_NAME", "csrftoken")
CSRF_HEADER_NAME = os.getenv("CSRF_HEADER_NAME", "HTTP_X_CSRFTOKEN")
CSRF_COOKIE_PATH = os.getenv("CSRF_COOKIE_PATH", "/")

# CSRF Trusted Origins (for production)
csrf_trusted_origins = os.getenv("CSRF_TRUSTED_ORIGINS", "")
if csrf_trusted_origins:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_trusted_origins.split(",")]

# CSRF Failure View (optional custom view)
csrf_failure_view = os.getenv("CSRF_FAILURE_VIEW", "")
if csrf_failure_view:
    CSRF_FAILURE_VIEW = csrf_failure_view


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cotton',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_celery_results',
    'django_celery_beat',
    'encrypted_model_fields',
    'crispy_forms',
    'crispy_tailwind',
    'user',
    'dicom_handler',
]

# Crispy Forms Configuration for Tailwind CSS
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",    
]

ROOT_URLCONF = 'draw_client.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'draw_client.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv("DJANGO_DB_ENGINE", "django.db.backends.sqlite3"),
        'NAME': os.getenv("DJANGO_DB_NAME", BASE_DIR / 'db.sqlite3'),
        'USER': os.getenv("DJANGO_DB_USER", ""),
        'PASSWORD': os.getenv("DJANGO_DB_PASSWORD", ""),
        'HOST': os.getenv("DJANGO_DB_HOST", "localhost"),
        'PORT': os.getenv("DJANGO_DB_PORT", ""),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Cache Configuration (Memcached)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': os.getenv('MEMCACHED_LOCATION', '127.0.0.1:11211'),
        'TIMEOUT': 300,  # 5 minutes default timeout
        'KEY_PREFIX': 'draw_client',
        'VERSION': 1,
    }
}

# Session Configuration (use memcached for sessions as well)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# Celery Settings

CELERY_BROKER_URL = os.getenv("RABBITMQ_URL", "amqp://guest:guest@localhost:5672/")
CELERY_RESULT_BACKEND = os.getenv("RABBITMQ_URL", "amqp://guest:guest@localhost:5672/")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_RESULT_BACKEND = 'django-db'

# Celery Beat Configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Celery Beat Schedule - Periodic Tasks
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'backend-cleanup': {
        'task': 'dicom_handler.cleanup_backend',
        'schedule': crontab(minute=0, hour='*/6'),  # Run every 6 hours
        'options': {
            'expires': 60 * 30,  # Task expires after 30 minutes if not picked up
        },
    },
    'gather-statistics': {
        'task': 'dicom_handler.gather_statistics',
        'schedule': crontab(minute='*/30'),  # Run every 30 hours
        'options': {
            'expires': 60 * 15,  # Task expires after 15 minutes if not picked up
        },
    },
    'dicom-export': {
        'task': 'dicom_handler.run_chain_a_export_pipeline',
        'schedule': crontab(minute='*/10'), # Run every 10 minutes
        'options': {
            'expires': 60 * 30, # Task expiry after 30 min if not picked up
        },   
    },
    'dicom-import': {
        'task': 'dicom_handler.run_chain_b_pipeline',
        'schedule': crontab(minute='*/3'), # Run every 3 minutes
        'options': {
            'expires': 60 * 30, # Task expiry after 30 min if not picked up
        },
    },
}

# Redirects after login and logout

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


# Logging Configuration


# Create logs directory
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'import_formatter': {
            'format': '[IMPORT] {levelname} {asctime} {module}.{funcName}:{lineno} - {message}',
            'style': '{',
        },
        'export_formatter': {
            'format': '[EXPORT] {levelname} {asctime} {module}.{funcName}:{lineno} - {message}',
            'style': '{',
        },
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'dicom_formatter': {
            'format': '[DICOM] {levelname} {asctime} {module} - {message}',
            'style': '{',
        },
        'celery_formatter': {
            'format': '[CELERY] {levelname} {asctime} {module} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'import_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'import_tasks.log',
            'maxBytes': 50 * 1024 * 1024,  # 50 MB
            'backupCount': 10,
            'formatter': 'import_formatter',
        },
        'export_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'export_tasks.log',
            'maxBytes': 50 * 1024 * 1024,  # 50 MB
            'backupCount': 10,
            'formatter': 'export_formatter',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'django_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django.log',
            'maxBytes': 50 * 1024 * 1024,  # 50 MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'dicom_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'dicom_processing.log',
            'maxBytes': 100 * 1024 * 1024,  # 100 MB
            'backupCount': 15,
            'formatter': 'dicom_formatter',
        },
        'celery_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'celery.log',
            'maxBytes': 50 * 1024 * 1024,  # 50 MB
            'backupCount': 10,
            'formatter': 'celery_formatter',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'errors.log',
            'maxBytes': 25 * 1024 * 1024,  # 25 MB
            'backupCount': 20,
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'security.log',
            'maxBytes': 25 * 1024 * 1024,  # 25 MB
            'backupCount': 20,
            'formatter': 'verbose',
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console', 'django_file'],
    },
    'loggers': {
        'django': {
            'handlers': ['django_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'dicom_handler': {
            'handlers': ['dicom_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.export_services': {
            'handlers': ['export_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.import_services': {
            'handlers': ['import_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.export_services.task1_read_dicom_from_storage': {
            'handlers': ['export_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.export_services.task2_match_autosegmentation_template': {
            'handlers': ['export_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.export_services.task3_deidentify_series': {
            'handlers': ['export_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.export_services.task4_export_series_to_api': {
            'handlers': ['export_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.import_services.task1_poll_and_retrieve_rtstruct': {
            'handlers': ['import_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dicom_handler.import_services.task2_reidentify_rtstruct': {
            'handlers': ['import_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'celery': {
            'handlers': ['celery_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.task': {
            'handlers': ['celery_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.worker': {
            'handlers': ['celery_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}