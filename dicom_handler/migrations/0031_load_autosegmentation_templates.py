# Generated by Django 5.2.7 on 2025-10-21 10:25

import json
import os
from django.db import migrations
from django.conf import settings


def load_autosegmentation_templates(apps, schema_editor):
    """Load autosegmentation templates from JSON fixture file"""
    AutosegmentationTemplate = apps.get_model('dicom_handler', 'AutosegmentationTemplate')
    AutosegmentationModel = apps.get_model('dicom_handler', 'AutosegmentationModel')
    AutosegmentationStructure = apps.get_model('dicom_handler', 'AutosegmentationStructure')
    
    # Path to the JSON fixture file
    fixture_path = os.path.join(settings.BASE_DIR, 'seed_data', 'autosegmentation_templates.json')
    
    if not os.path.exists(fixture_path):
        print(f"Warning: Fixture file not found at {fixture_path}")
        return
    
    # Check if templates already exist to avoid duplicates
    if AutosegmentationTemplate.objects.exists():
        print("Autosegmentation templates already exist. Skipping seed data load.")
        return
    
    with open(fixture_path, 'r', encoding='utf-8') as f:
        fixture_data = json.load(f)
    
    # Separate data by model type
    templates_data = [item for item in fixture_data if item['model'] == 'dicom_handler.autosegmentationtemplate']
    models_data = [item for item in fixture_data if item['model'] == 'dicom_handler.autosegmentationmodel']
    structures_data = [item for item in fixture_data if item['model'] == 'dicom_handler.autosegmentationstructure']
    
    # Create templates first
    template_map = {}
    for item in templates_data:
        template = AutosegmentationTemplate(
            id=item['pk'],
            template_name=item['fields']['template_name'],
            template_description=item['fields']['template_description']
        )
        template.save()
        template_map[item['pk']] = template
        print(f"Created template: {template.template_name}")
    
    # Create models
    model_map = {}
    for item in models_data:
        template_id = item['fields']['autosegmentation_template_name']
        model = AutosegmentationModel(
            id=item['pk'],
            autosegmentation_template_name=template_map.get(template_id),
            model_id=item['fields']['model_id'],
            name=item['fields']['name'],
            config=item['fields']['config'],
            trainer_name=item['fields']['trainer_name'],
            postprocess=item['fields']['postprocess']
        )
        model.save()
        model_map[item['pk']] = model
        print(f"Created model: {model.name}")
    
    # Create structures
    for item in structures_data:
        model_id = item['fields']['autosegmentation_model']
        structure = AutosegmentationStructure(
            id=item['pk'],
            autosegmentation_model=model_map.get(model_id),
            map_id=item['fields']['map_id'],
            name=item['fields']['name']
        )
        structure.save()
    
    print(f"Successfully loaded {len(templates_data)} templates, {len(models_data)} models, and {len(structures_data)} structures")


def reverse_load_autosegmentation_templates(apps, schema_editor):
    """Remove all autosegmentation templates, models, and structures"""
    AutosegmentationTemplate = apps.get_model('dicom_handler', 'AutosegmentationTemplate')
    AutosegmentationModel = apps.get_model('dicom_handler', 'AutosegmentationModel')
    AutosegmentationStructure = apps.get_model('dicom_handler', 'AutosegmentationStructure')
    
    AutosegmentationStructure.objects.all().delete()
    AutosegmentationModel.objects.all().delete()
    AutosegmentationTemplate.objects.all().delete()
    print("Removed all autosegmentation templates, models, and structures")


class Migration(migrations.Migration):

    dependencies = [
        ('dicom_handler', '0030_systemconfiguration_draw_token_refresh_endpoint'),
    ]

    operations = [
        migrations.RunPython(load_autosegmentation_templates, reverse_load_autosegmentation_templates),
    ]
